// Liste des √©mojis par d√©faut
const defaultEmojis = [
  "üçì", "üçï", "üçî", "üåµ", "üê±", "üêü", "üé∏", "üé®", "üì±", "üöó",
  "üç¶", "ü•ë", "ü¶Ñ", "üåô", "üî•", "üé∂", "üíª", "üêª", "üç©", "üèÄ",
  "üåà", "üçø", "ü•Ç", "üçπ", "üéÅ", "üèûÔ∏è", "üöÄ", "üéß", "üëë", "‚öΩ",
  "üìö", "üéÇ", "üç™", "üåª", "üéÄ", "üê∂", "üçá", "üåé", "üçâ", "üé§",
  "üéØ", "üçã", "üéπ", "üêæ", "ü™ê", "üõ¥", "ü¶ã", "üç´", "üê®", "üçí",
  "üå¥", "üö≤", "üéÆ", "‚ö°", "‚≠ê", "üåü", "‚òï"
];

// Fonction pour charger les √©mojis personnalis√©s depuis `localStorage`
function loadEmojiList() {
  const storedEmojis = localStorage.getItem("emojiList");
  return storedEmojis ? JSON.parse(storedEmojis) : [...defaultEmojis];
}

// Fonction pour sauvegarder les √©mojis dans `localStorage`
function saveEmojiList() {
  localStorage.setItem("emojiList", JSON.stringify(emojiList));
}

// Initialisation de la liste d'√©mojis (personnalis√©e ou par d√©faut)
let emojiList = loadEmojiList();

// Fonction pour remplir le tableau des √©mojis personnalisables
function populateEmojiTable() {
  const tableBody = document.getElementById("emojiTable").querySelector("tbody");
  tableBody.innerHTML = "";

  emojiList.forEach((emoji, index) => {
    const row = document.createElement("tr");

    // Colonne Num√©ro
    const numberCell = document.createElement("td");
    numberCell.textContent = index + 1;
    row.appendChild(numberCell);

    // Colonne √âmoji actuel
    const emojiCell = document.createElement("td");
    if (emoji.startsWith("data:image")) {
      emojiCell.innerHTML = `<img src="${emoji}" width="20" height="20">`;
    } else {
      emojiCell.textContent = emoji;
    }
    emojiCell.id = `current-emoji-${index}`;
    row.appendChild(emojiCell);

    // Colonne Nouvelle image (Correction appliqu√©e)
    const inputCell = document.createElement("td");

    // Cr√©ation d'un bouton "Ajouter un fichier"
    const uploadButton = document.createElement("button");
    uploadButton.textContent = "Ajouter un fichier";
    uploadButton.className = "upload-btn";

    // Cr√©ation d'un champ de s√©lection de fichier (cach√©)
    const fileInput = document.createElement("input");
    fileInput.type = "file";
    fileInput.accept = "image/*";
    fileInput.dataset.index = index;
    fileInput.style.display = "none"; // Cache l'input pour √©viter le texte "Aucun fichier choisi"

    // √âv√©nement pour d√©tecter le choix du fichier
    fileInput.addEventListener("change", (event) => {
      const file = event.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = (e) => {
          emojiList[index] = e.target.result;
          saveEmojiList();
          populateEmojiTable();
          generateCards();
        };
        reader.readAsDataURL(file);
      }
    });

    // Cliquer sur le bouton d√©clenche l'ouverture du fichier cach√©
    uploadButton.addEventListener("click", () => {
      fileInput.click();
    });

    // Ajout des √©l√©ments √† la cellule
    inputCell.appendChild(uploadButton);
    inputCell.appendChild(fileInput);
    row.appendChild(inputCell);

    // Colonne Action (R√©initialisation)
    const actionCell = document.createElement("td");
    const resetButton = document.createElement("button");
    resetButton.textContent = "R√©initialiser";
    resetButton.className = "reset-btn";
    resetButton.onclick = () => resetEmoji(index);
    actionCell.appendChild(resetButton);
    row.appendChild(actionCell);

    tableBody.appendChild(row);
  });
}

// Fonction pour r√©initialiser un √©moji
function resetEmoji(index) {
  emojiList[index] = defaultEmojis[index];
  saveEmojiList();
  populateEmojiTable();
  generateCards();
}

// Fonction pour mettre √† jour l'affichage des curseurs
function updatePreview() {
  const minSizeInput = document.getElementById("minSize");
  const maxSizeInput = document.getElementById("maxSize");
  document.getElementById("minSizeValue").textContent = `${minSizeInput.value}px`;
  document.getElementById("maxSizeValue").textContent = `${maxSizeInput.value}px`;

  if (parseInt(minSizeInput.value, 10) > parseInt(maxSizeInput.value, 10)) {
    maxSizeInput.value = minSizeInput.value;
    document.getElementById("maxSizeValue").textContent = `${maxSizeInput.value}px`;
  }
}

// Initialisation
document.addEventListener("DOMContentLoaded", () => {
  populateEmojiTable();
  generateCards();

  document.getElementById("minSize").addEventListener("input", () => {
    updatePreview();
    generateCards();
  });

  document.getElementById("maxSize").addEventListener("input", () => {
    updatePreview();
    generateCards();
  });
});
